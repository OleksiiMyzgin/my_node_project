{"version":3,"sources":["../../../../public/javascripts/modules/map.js"],"names":["mapOptions","center","lat","lng","zoom","loadPlaces","map","get","then","places","res","data","length","alert","bounds","google","maps","LatLngBounds","infoWindow","InfoWindow","markers","place","location","coordinates","placeLng","placeLat","position","extend","marker","Marker","forEach","addListener","html","slug","photo","name","address","setContent","open","setCenter","getCenter","fitBounds","makeMap","mapDiv","Map","input","autocomplete","Autocomplete","getPlace","geometry"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA,IAAMA,aAAa;AACfC,YAAQ,EAAEC,KAAK,IAAP,EAAaC,KAAK,CAAC,IAAnB,EADO;AAEfC,UAAM;AAFS,CAAnB;;AAKA,SAASC,UAAT,CAAoBC,GAApB,EAAkD;AAAA,QAAzBJ,GAAyB,uEAAnB,IAAmB;AAAA,QAAbC,GAAa,uEAAP,CAAC,IAAM;;AAC9C,oBAAMI,GAAN,2BAAkCL,GAAlC,aAA6CC,GAA7C,EACKK,IADL,CACU,eAAO;AACT,YAAMC,SAASC,IAAIC,IAAnB;AACA,YAAG,CAACF,OAAOG,MAAX,EAAmB;AACdC,kBAAM,kBAAN;AACA;AACJ;;AAED;AACA,YAAMC,SAAS,IAAIC,OAAOC,IAAP,CAAYC,YAAhB,EAAf;AACA,YAAMC,aAAa,IAAIH,OAAOC,IAAP,CAAYG,UAAhB,EAAnB;;AAEA,YAAMC,UAAUX,OAAOH,GAAP,CAAW,iBAAS;AAAA,uDACHe,MAAMC,QAAN,CAAeC,WADZ;AAAA,gBACzBC,QADyB;AAAA,gBACfC,QADe;;AAEhC,gBAAMC,WAAW,EAAExB,KAAKuB,QAAP,EAAiBtB,KAAKqB,QAAtB,EAAjB;AACAV,mBAAOa,MAAP,CAAcD,QAAd;AACA,gBAAME,SAAS,IAAIb,OAAOC,IAAP,CAAYa,MAAhB,CAAuB,EAAEvB,QAAF,EAAOoB,kBAAP,EAAvB,CAAf;AACAE,mBAAOP,KAAP,GAAeA,KAAf;AACA,mBAAOO,MAAP;AACH,SAPe,CAAhB;;AASA;AACAR,gBAAQU,OAAR,CAAgB;AAAA,mBAAUF,OAAOG,WAAP,CAAmB,OAAnB,EAA4B,YAAY;AAC9D,oBAAMC,uFAEgB,KAAKX,KAAL,CAAWY,IAF3B,wDAGwB,KAAKZ,KAAL,CAAWa,KAAX,IAAoB,WAH5C,gBAGkE,KAAKb,KAAL,CAAWc,IAH7E,uCAIO,KAAKd,KAAL,CAAWc,IAJlB,WAI4B,KAAKd,KAAL,CAAWC,QAAX,CAAoBc,OAJhD,6EAAN;AAQAlB,2BAAWmB,UAAX,CAAsBL,IAAtB;AACAd,2BAAWoB,IAAX,CAAgBhC,GAAhB,EAAqB,IAArB;AACH,aAXyB,CAAV;AAAA,SAAhB;;AAaA;AACAA,YAAIiC,SAAJ,CAAczB,OAAO0B,SAAP,EAAd;AACAlC,YAAImC,SAAJ,CAAc3B,MAAd;AACH,KAtCL;AAuCH;;AAED,SAAS4B,OAAT,CAAiBC,MAAjB,EAAyB;AACrB,QAAI,CAACA,MAAL,EAAa;AACb;AACA,QAAMrC,MAAM,IAAIS,OAAOC,IAAP,CAAY4B,GAAhB,CAAoBD,MAApB,EAA4B3C,UAA5B,CAAZ;AACAK,eAAWC,GAAX;;AAEA,QAAMuC,QAAQ,cAAE,oBAAF,CAAd;AACA,QAAMC,eAAe,IAAI/B,OAAOC,IAAP,CAAYP,MAAZ,CAAmBsC,YAAvB,CAAoCF,KAApC,CAArB;AACAC,iBAAaf,WAAb,CAAyB,eAAzB,EAA0C,YAAM;AAC5C,YAAMV,QAAQyB,aAAaE,QAAb,EAAd;AACA3C,mBAAWC,GAAX,EAAgBe,MAAM4B,QAAN,CAAe3B,QAAf,CAAwBpB,GAAxB,EAAhB,EAA+CmB,MAAM4B,QAAN,CAAe3B,QAAf,CAAwBnB,GAAxB,EAA/C;AACH,KAHD;AAIH;;kBAEcuC,O","file":"map.js","sourcesContent":["import axios from 'axios';\nimport { $ } from './bling';\n\nconst mapOptions = {\n    center: { lat: 43.2, lng: -79.8 },\n    zoom: 10\n};\n\nfunction loadPlaces(map, lat = 43.2, lng = -79.8) {\n    axios.get(`/api/stores/near?lat=${lat}&lng=${lng}`)\n        .then(res => {\n            const places = res.data;\n            if(!places.length) {\n                 alert('no places found!');\n                 return;\n            }\n\n            //create a bounds\n            const bounds = new google.maps.LatLngBounds();\n            const infoWindow = new google.maps.InfoWindow();\n\n            const markers = places.map(place => {\n                const [placeLng, placeLat] = place.location.coordinates;\n                const position = { lat: placeLat, lng: placeLng };\n                bounds.extend(position);\n                const marker = new google.maps.Marker({ map, position });\n                marker.place = place;\n                return marker;\n            });\n\n            // when someone clicks on a marker, show the details of that places\n            markers.forEach(marker => marker.addListener('click', function () {\n                const html = `\n                <div class=\"popup\">\n                    <a href=\"/store/${this.place.slug}\">\n                        <img src=\"/uploads/${ this.place.photo || 'store.png' }\" alt=\"${this.place.name}\">\n                        <p>${this.place.name} - ${this.place.location.address}</p>\n                    </a>\n                </div>\n                `;\n                infoWindow.setContent(html);\n                infoWindow.open(map, this)\n            }));\n\n            //then zoom the map to fit all the markers perfectly\n            map.setCenter(bounds.getCenter());\n            map.fitBounds(bounds);\n        })\n}\n\nfunction makeMap(mapDiv) {\n    if (!mapDiv) return;\n    // make our map\n    const map = new google.maps.Map(mapDiv, mapOptions);\n    loadPlaces(map);\n\n    const input = $('[name=\"geolocate\"]');\n    const autocomplete = new google.maps.places.Autocomplete(input);\n    autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        loadPlaces(map, place.geometry.location.lat(), place.geometry.location.lng());\n    });\n}\n\nexport default makeMap;\n"]}