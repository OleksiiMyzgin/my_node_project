{"version":3,"sources":["../../models/Store.js"],"names":["mongoose","require","Promise","global","slug","storeSchema","Schema","name","type","String","trim","required","description","tags","created","Date","default","now","location","coordinates","Number","address","photo","author","ObjectId","ref","toJSON","virtuals","toObject","index","pre","next","isModified","generateSlugFromName","methods","nameSlugged","slugRegEx","RegExp","constructor","find","storesWithSlug","length","statics","getTagsList","aggregate","$unwind","$group","_id","count","$sum","$sort","virtual","localField","foreignField","module","exports","model"],"mappings":"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","file":"Store.js","sourcesContent":[" const mongoose = require ('mongoose');\n mongoose.Promise = global.Promise;  \n const slug = require('slugs');\n\n const storeSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    trim: true,\n    required: 'Please enter a store name!'\n  },\n  slug: String,\n  description: {\n    type: String,\n    trim: true\n  },\n  tags: [String],\n  created: {\n      type: Date,\n      default: Date.now\n  },\n  location: {\n      type: {\n          type: String,\n          default: 'Point'\n      },\n      coordinates:[{\n          type: Number,\n          required: 'You must supply coordinates!'\n      }],\n      address: {\n          type: String,\n          required: 'You must supply an address!'\n      },\n  },\n  photo: String,\n  author: {\n      type: mongoose.Schema.ObjectId,\n      ref: 'User',\n      required: 'You must supply an author'\n  }\n }, {\n     toJSON: { virtuals: true },\n     toObject: { virtuals: true }\n });\n\n // Define our Indexes\n storeSchema.index({\n     name: 'text',\n     description: 'text'\n });\n\n storeSchema.index({ location: '2dsphere' });\n\n storeSchema.pre('save', async function(next) {\n     if (this.isModified('name')) {\n         this.slug = await this.generateSlugFromName(this.name);\n     }\n\n     next();\n });\n\n storeSchema.methods.generateSlugFromName = async function(name) {\n     let nameSlugged = slug(name);\n     const slugRegEx = new RegExp(`^(${nameSlugged})((-[0-9]*$)?)$`, 'i');\n     const storesWithSlug = await this.constructor.find({ slug: slugRegEx });\n     if (storesWithSlug.length > 0) {\n         nameSlugged += '-' + (storesWithSlug.length + 1);\n     }\n\n     return nameSlugged;\n };\n \n storeSchema.statics.getTagsList = function () {\n     return this.aggregate([\n         { $unwind: '$tags'}, // $ this is the field in my docs that i want to unwind\n         { $group: { _id: '$tags', count: { $sum: 1 } } },\n         { $sort : { count: -1 } }\n     ]);\n };\n\n // find reviews where the store _id property === reviews store property\n storeSchema.virtual('reviews', {\n     ref: 'Review', // what model to link?\n     localField: '_id', // which field on the store?\n     foreignField: 'store' // which field on the review?\n });\n\n module.exports = mongoose.model('Store', storeSchema);"]}