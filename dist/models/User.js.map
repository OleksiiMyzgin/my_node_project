{"version":3,"sources":["../../models/User.js"],"names":["mongoose","require","Schema","Promise","global","md5","validator","mongodbErrorHandler","passportLocalMongoose","userSchema","email","type","String","unique","lowercase","trim","validate","isEmail","required","name","resetPasswordToken","resetPasswordExpires","Date","hearts","ObjectId","ref","virtual","get","hash","plugin","usernameField","module","exports","model"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASF,SAASE,MAAxB;AACAF,SAASG,OAAT,GAAmBC,OAAOD,OAA1B;AACA,IAAME,MAAMJ,QAAQ,KAAR,CAAZ;AACA,IAAMK,YAAYL,QAAQ,WAAR,CAAlB;AACA,IAAMM,sBAAsBN,QAAQ,yBAAR,CAA5B;AACA,IAAMO,wBAAwBP,QAAQ,yBAAR,CAA9B;;AAEA,IAAMQ,aAAa,IAAIP,MAAJ,CAAW;AAC1BQ,WAAO;AACHC,cAAMC,MADH;AAEHC,gBAAQ,IAFL;AAGHC,mBAAW,IAHR;AAIHC,cAAM,IAJH,EAIS;AACZC,kBAAU,CAACV,UAAUW,OAAX,EAAoB,uBAApB,CALP;AAMHC,kBAAU;AANP,KADmB;AAS1BC,UAAM;AACFR,cAAMC,MADJ;AAEFM,kBAAU,sBAFR;AAGFH,cAAM;AAHJ,KAToB;AAc1BK,wBAAoBR,MAdM;AAe1BS,0BAAsBC,IAfI;AAgB1BC,YAAQ,CACJ,EAAEZ,MAAMX,SAASE,MAAT,CAAgBsB,QAAxB,EAAkCC,KAAK,OAAvC,EADI;AAhBkB,CAAX,CAAnB;;AAqBAhB,WAAWiB,OAAX,CAAmB,UAAnB,EAA+BC,GAA/B,CAAmC,YAAW;AAC1C,QAAMC,OAAOvB,IAAI,KAAKK,KAAT,CAAb;AACA,4CAAsCkB,IAAtC;AACH,CAHD;;AAKAnB,WAAWoB,MAAX,CAAkBrB,qBAAlB,EAAyC,EAAEsB,eAAe,OAAjB,EAAzC;AACArB,WAAWoB,MAAX,CAAkBtB,mBAAlB;;AAEAwB,OAAOC,OAAP,GAAiBhC,SAASiC,KAAT,CAAe,MAAf,EAAuBxB,UAAvB,CAAjB","file":"User.js","sourcesContent":["const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nmongoose.Promise = global.Promise;\nconst md5 = require('md5');\nconst validator = require('validator');\nconst mongodbErrorHandler = require('mongoose-mongodb-errors');\nconst passportLocalMongoose = require('passport-local-mongoose');\n\nconst userSchema = new Schema({\n    email: {\n        type: String,\n        unique: true,\n        lowercase: true,\n        trim: true, //take off any spaces between\n        validate: [validator.isEmail, 'Invalid Email Address'],\n        required: 'Please Supply an email address'\n    },\n    name: {\n        type: String,\n        required: 'Please supply a name',\n        trim: true\n    },\n    resetPasswordToken: String,\n    resetPasswordExpires: Date,\n    hearts: [\n        { type: mongoose.Schema.ObjectId, ref: 'Store' }\n    ]\n});\n\nuserSchema.virtual('gravatar').get(function() {\n    const hash = md5(this.email);\n    return `https://gravatar.com/avatar/${hash}?s=200`;\n});\n\nuserSchema.plugin(passportLocalMongoose, { usernameField: 'email' });\nuserSchema.plugin(mongodbErrorHandler);\n\nmodule.exports = mongoose.model('User', userSchema);"]}