{"version":3,"sources":["../../controllers/storeController.js"],"names":["mongoose","require","Store","model","User","multer","jimp","uuid","multerOptions","storage","memoryStorage","fileFilter","req","file","next","isPhoto","mimetype","startsWith","message","exports","homePage","res","render","addStore","title","upload","single","resize","extension","split","body","photo","v4","read","buffer","AUTO","write","createStore","author","user","_id","save","store","flash","name","redirect","slug","getStores","find","stores","confirmOwner","equals","Error","editStore","findOne","params","id","updateStore","location","type","findOneAndUpdate","new","runValidators","exec","getStoreBySlug","populate","getStoreByTag","tag","tagQuery","$exists","tagsPromise","getTagsList","storePromise","tags","Promise","all","searchStores","$text","$search","query","q","score","$meta","sort","limit","json","mapStores","coordinates","lng","lat","map","parseFloat","$near","$geometry","$maxDistance","select","mapPage","heartStore","hearts","obj","toString","operator","includes","getHearts","$in"],"mappings":"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","file":"storeController.js","sourcesContent":["const mongoose = require('mongoose');\nconst Store = mongoose.model('Store');\nconst User = mongoose.model('User');\nconst multer = require('multer');\nconst jimp = require('jimp');\nconst uuid = require('uuid');\n\n\nconst multerOptions = {\n    storage: multer.memoryStorage(),\n    fileFilter(req, file, next) {\n        const isPhoto = file.mimetype.startsWith('image/');\n        if(isPhoto) {\n            next(null, true);\n        } else {\n            next({ message: 'That filetype isn\\'t allowed! Please only upload jpg/png/gif' }, false);\n        }\n    }\n};\n\nexports.homePage = (req, res) => {\n    res.render('index');\n};\n\nexports.addStore = (req, res) => {\n    res.render('editStore', { title: 'Add Store' });\n};\n\nexports.upload = multer(multerOptions).single('photo');\n\nexports.resize = async (req, res, next) => {\n    // check if there is no new file to resize\n    if (!req.file) {\n        next(); // skip to the next middleware\n        return;\n    }\n    const extension = req.file.mimetype.split('/')[1];\n    req.body.photo = `${uuid.v4()}.${extension}`;\n    // now we resize\n    const photo = await jimp.read(req.file.buffer);\n    await photo.resize(800, jimp.AUTO);\n    await photo.write(`./public/uploads/${req.body.photo}`);\n    // once we have written the photo to our filesystem, keep going!\n    next();\n\n}\n\nexports.createStore = async (req, res) => {\n    req.body.author = req.user._id;\n    const store = await (new Store(req.body)).save();\n    req.flash('success', `Successfully Created ${store.name}. Care to leave a review?`);\n    res.redirect(`/store/${store.slug}`);\n};\n\nexports.getStores = async (req, res) => {\n    // 1. Query the database for a list of all stores\n    const stores = await Store.find(); // return Promise\n    res.render('stores', { title: 'Stores', stores });\n};\n\n// if we need admin we can implement user.level < 10 where 10 is admin and 20 is user\nconst confirmOwner = (store, user) => {\n    if(!store.author.equals(user._id)) {\n        throw Error('You must own a store in order to edit it!');\n    }\n};\n\nexports.editStore = async (req, res) => {\n    // 1. Find the store given the ID\n    const store = await Store.findOne({ _id: req.params.id });\n    // 2. confirm they are the owner of the store\n    confirmOwner(store, req.user);\n    // 3. Render out the edit form so the user can update their store\n    res.render('editStore', { title: `Edit ${store.name}`, store });\n};\n\nexports.updateStore = async (req, res) => {\n    // set the location data to be a point\n    req.body.location.type = 'Point';\n    // find and update store\n    const store = await Store.findOneAndUpdate(\n        { _id: req.params.id},\n        req.body,\n        {new: true, // return the new store instead of the old one\n            runValidators: true}\n    ).exec();\n    req.flash('success', `Successfully updated <strong>${store.name}</strong>. <a href=\"/stores/${store.slug}\">View Store =></a>`);\n    res.redirect(`/stores/${store._id}/edit`);\n    // Redirect them the store and tell them it worked\n};\n\nexports.getStoreBySlug = async (req, res, next) => {\n    const store = await Store.findOne({ slug: req.params.slug}).populate('author');\n    // res.json(store);\n    if(!store) return next();\n    res.render('store', { store, title: store.name });\n};\n\nexports.getStoreByTag = async(req, res) => {\n    const tag = req.params.tag;\n    // if there is no tag its just gonna fall back to second query (give me any store that a tag property on it)\n    const tagQuery = tag || { $exists: true };\n    const tagsPromise =  Store.getTagsList();\n    const storePromise = Store.find({ tags: tagQuery });\n    const [tags, stores] = await Promise.all([tagsPromise, storePromise]);\n\n\n    res.render('tag', { tags, title: 'Tags', tag, stores });\n};\n\nexports.searchStores = async(req, res) => {\n    const stores = await Store\n    // first find stores that match\n    .find({\n        $text: {\n            $search: req.query.q\n        }\n    }, {\n        score: {\n            $meta: 'textScore'\n        }\n    })\n    // then sort them\n    .sort({\n        score: { $meta: 'textScore'}\n    })\n    // limit to only 5 results\n    .limit(5);\n    res.json(stores);\n};\n\nexports.mapStores = async (req, res) => {\n    const coordinates = [req.query.lng, req.query.lat].map(parseFloat);\n    const q = {\n        location: {\n            $near: {\n                $geometry: {\n                    type: 'Point',\n                    coordinates\n                },\n                $maxDistance: 10000 // 10km\n            }\n        }\n    };\n\n    const stores = await Store.find(q).select('slug name description location photo').limit(10);\n    res.json(stores);\n};\n\nexports.mapPage = (req, res) => {\n    res.render('map', { title: 'Map' });\n};\n\nexports.heartStore = async (req, res) => {\n    const hearts = req.user.hearts.map(obj => obj.toString());\n    const operator = hearts.includes(req.params.id) ? '$pull' : '$addToSet';\n    const user = await User\n        .findOneAndUpdate( req.user._id,\n            { [operator] : { hearts: req.params.id } },\n            { new: true }\n        );\n    res.json(user);\n};\n\nexports.getHearts = async (req, res) => {\n    const stores = await Store.find({\n        _id: { $in: req.user.hearts }\n    });\n    res.render('stores', { title: 'Hearted Stores', stores })\n};"]}