{"version":3,"sources":["../../routes/index.js"],"names":["express","require","router","Router","storeController","userController","authController","catchErrors","get","getStores","isLoggedIn","addStore","post","upload","resize","createStore","updateStore","editStore","getStoreBySlug","getStoreByTag","loginForm","login","registerForm","validateRegister","register","logout","account","updateAccount","forgot","reset","confirmedPassword","update","searchStores","mapStores","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,SAASF,QAAQG,MAAR,EAAf;AACA,IAAMC,kBAAkBH,QAAQ,gCAAR,CAAxB;AACA,IAAMI,iBAAiBJ,QAAQ,+BAAR,CAAvB;AACA,IAAMK,iBAAiBL,QAAQ,+BAAR,CAAvB;;eACwBA,QAAQ,2BAAR,C;IAAhBM,W,YAAAA,W;;AAER;AACA;AACA;;AAEAL,OAAOM,GAAP,CAAW,GAAX,EAAgBD,YAAYH,gBAAgBK,SAA5B,CAAhB;AACAP,OAAOM,GAAP,CAAW,SAAX,EAAsBD,YAAYH,gBAAgBK,SAA5B,CAAtB;AACAP,OAAOM,GAAP,CAAW,MAAX,EAAmBF,eAAeI,UAAlC,EAA6CN,gBAAgBO,QAA7D;;AAEAT,OAAOU,IAAP,CAAY,MAAZ,EACIR,gBAAgBS,MADpB,EAEIN,YAAYH,gBAAgBU,MAA5B,CAFJ,EAGIP,YAAYH,gBAAgBW,WAA5B,CAHJ;;AAMAb,OAAOU,IAAP,CAAY,UAAZ,EACIR,gBAAgBS,MADpB,EAEIN,YAAYH,gBAAgBU,MAA5B,CAFJ,EAGIP,YAAYH,gBAAgBY,WAA5B,CAHJ;;AAMAd,OAAOM,GAAP,CAAW,kBAAX,EAA+BD,YAAYH,gBAAgBa,SAA5B,CAA/B;AACAf,OAAOM,GAAP,CAAW,cAAX,EAA2BD,YAAYH,gBAAgBc,cAA5B,CAA3B;;AAEAhB,OAAOM,GAAP,CAAW,OAAX,EAAoBD,YAAYH,gBAAgBe,aAA5B,CAApB;AACAjB,OAAOM,GAAP,CAAW,YAAX,EAAyBD,YAAYH,gBAAgBe,aAA5B,CAAzB;;AAEAjB,OAAOM,GAAP,CAAW,QAAX,EAAqBH,eAAee,SAApC;AACAlB,OAAOU,IAAP,CAAY,QAAZ,EAAsBN,eAAee,KAArC;AACAnB,OAAOM,GAAP,CAAW,WAAX,EAAwBH,eAAeiB,YAAvC;;AAEA;AACA;AACA;AACApB,OAAOU,IAAP,CAAY,WAAZ,EACIP,eAAekB,gBADnB,EAEIlB,eAAemB,QAFnB,EAGIlB,eAAee,KAHnB;;AAMAnB,OAAOM,GAAP,CAAW,SAAX,EAAsBF,eAAemB,MAArC;;AAEAvB,OAAOM,GAAP,CAAW,UAAX,EAAuBF,eAAeI,UAAtC,EAAiDL,eAAeqB,OAAhE;AACAxB,OAAOU,IAAP,CAAY,UAAZ,EAAwBL,YAAYF,eAAesB,aAA3B,CAAxB;AACAzB,OAAOU,IAAP,CAAY,iBAAZ,EAA+BL,YAAYD,eAAesB,MAA3B,CAA/B;AACA1B,OAAOM,GAAP,CAAW,uBAAX,EAAoCD,YAAYD,eAAeuB,KAA3B,CAApC;AACA3B,OAAOU,IAAP,CAAY,uBAAZ,EACIN,eAAewB,iBADnB,EAEIvB,YAAYD,eAAeyB,MAA3B,CAFJ;;AAIA;;;;AAIA7B,OAAOM,GAAP,CAAW,aAAX,EAA0BD,YAAYH,gBAAgB4B,YAA5B,CAA1B;AACA9B,OAAOM,GAAP,CAAW,kBAAX,EAA+BD,YAAYH,gBAAgB6B,SAA5B,CAA/B;;AAGAC,OAAOC,OAAP,GAAiBjC,MAAjB","file":"index.js","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst storeController = require('../controllers/storeController');\nconst userController = require('../controllers/userController');\nconst authController = require('../controllers/authController');\nconst { catchErrors } = require('../handlers/errorHandlers');\n\n// req is object full of info that coming in\n// res is object full of methods that sending data back to user \n// Do work here\n\nrouter.get('/', catchErrors(storeController.getStores));\nrouter.get('/stores', catchErrors(storeController.getStores));\nrouter.get('/add', authController.isLoggedIn,storeController.addStore);\n\nrouter.post('/add',\n    storeController.upload,\n    catchErrors(storeController.resize),\n    catchErrors(storeController.createStore)\n);\n\nrouter.post('/add/:id',\n    storeController.upload,\n    catchErrors(storeController.resize),\n    catchErrors(storeController.updateStore)\n);\n\nrouter.get('/stores/:id/edit', catchErrors(storeController.editStore));\nrouter.get('/store/:slug', catchErrors(storeController.getStoreBySlug));\n\nrouter.get('/tags', catchErrors(storeController.getStoreByTag));\nrouter.get('/tags/:tag', catchErrors(storeController.getStoreByTag));\n\nrouter.get('/login', userController.loginForm);\nrouter.post('/login', authController.login);\nrouter.get('/register', userController.registerForm);\n\n// 1. Validate the registration data\n// 2. register the user\n// 3. we need to log them in\nrouter.post('/register',\n    userController.validateRegister,\n    userController.register,\n    authController.login\n);\n\nrouter.get('/logout', authController.logout);\n\nrouter.get('/account', authController.isLoggedIn,userController.account);\nrouter.post('/account', catchErrors(userController.updateAccount));\nrouter.post('/account/forgot', catchErrors(authController.forgot));\nrouter.get('/account/reset/:token', catchErrors(authController.reset));\nrouter.post('/account/reset/:token',\n    authController.confirmedPassword,\n    catchErrors(authController.update));\n\n/*\n    API\n */\n\nrouter.get('/api/search', catchErrors(storeController.searchStores));\nrouter.get('/api/stores/near', catchErrors(storeController.mapStores));\n\n\nmodule.exports = router;"]}