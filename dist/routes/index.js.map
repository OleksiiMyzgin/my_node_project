{"version":3,"sources":["../../routes/index.js"],"names":["express","require","router","Router","storeController","userController","authController","reviewController","catchErrors","get","getStores","isLoggedIn","addStore","post","upload","resize","createStore","updateStore","editStore","getStoreBySlug","getStoreByTag","loginForm","login","registerForm","validateRegister","register","logout","account","updateAccount","forgot","reset","confirmedPassword","update","mapPage","getHearts","addReview","getTopStores","searchStores","mapStores","heartStore","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,SAASF,QAAQG,MAAR,EAAf;AACA,IAAMC,kBAAkBH,QAAQ,gCAAR,CAAxB;AACA,IAAMI,iBAAiBJ,QAAQ,+BAAR,CAAvB;AACA,IAAMK,iBAAiBL,QAAQ,+BAAR,CAAvB;AACA,IAAMM,mBAAmBN,QAAQ,iCAAR,CAAzB;;eACwBA,QAAQ,2BAAR,C;IAAhBO,W,YAAAA,W;;AAER;AACA;AACA;;AAEAN,OAAOO,GAAP,CAAW,GAAX,EAAgBD,YAAYJ,gBAAgBM,SAA5B,CAAhB;AACAR,OAAOO,GAAP,CAAW,SAAX,EAAsBD,YAAYJ,gBAAgBM,SAA5B,CAAtB;AACAR,OAAOO,GAAP,CAAW,MAAX,EAAmBH,eAAeK,UAAlC,EAA6CP,gBAAgBQ,QAA7D;;AAEAV,OAAOW,IAAP,CAAY,MAAZ,EACIT,gBAAgBU,MADpB,EAEIN,YAAYJ,gBAAgBW,MAA5B,CAFJ,EAGIP,YAAYJ,gBAAgBY,WAA5B,CAHJ;;AAMAd,OAAOW,IAAP,CAAY,UAAZ,EACIT,gBAAgBU,MADpB,EAEIN,YAAYJ,gBAAgBW,MAA5B,CAFJ,EAGIP,YAAYJ,gBAAgBa,WAA5B,CAHJ;;AAMAf,OAAOO,GAAP,CAAW,kBAAX,EAA+BD,YAAYJ,gBAAgBc,SAA5B,CAA/B;AACAhB,OAAOO,GAAP,CAAW,cAAX,EAA2BD,YAAYJ,gBAAgBe,cAA5B,CAA3B;;AAEAjB,OAAOO,GAAP,CAAW,OAAX,EAAoBD,YAAYJ,gBAAgBgB,aAA5B,CAApB;AACAlB,OAAOO,GAAP,CAAW,YAAX,EAAyBD,YAAYJ,gBAAgBgB,aAA5B,CAAzB;;AAEAlB,OAAOO,GAAP,CAAW,QAAX,EAAqBJ,eAAegB,SAApC;AACAnB,OAAOW,IAAP,CAAY,QAAZ,EAAsBP,eAAegB,KAArC;AACApB,OAAOO,GAAP,CAAW,WAAX,EAAwBJ,eAAekB,YAAvC;;AAEA;AACA;AACA;AACArB,OAAOW,IAAP,CAAY,WAAZ,EACIR,eAAemB,gBADnB,EAEInB,eAAeoB,QAFnB,EAGInB,eAAegB,KAHnB;;AAMApB,OAAOO,GAAP,CAAW,SAAX,EAAsBH,eAAeoB,MAArC;;AAEAxB,OAAOO,GAAP,CAAW,UAAX,EAAuBH,eAAeK,UAAtC,EAAiDN,eAAesB,OAAhE;AACAzB,OAAOW,IAAP,CAAY,UAAZ,EAAwBL,YAAYH,eAAeuB,aAA3B,CAAxB;AACA1B,OAAOW,IAAP,CAAY,iBAAZ,EAA+BL,YAAYF,eAAeuB,MAA3B,CAA/B;AACA3B,OAAOO,GAAP,CAAW,uBAAX,EAAoCD,YAAYF,eAAewB,KAA3B,CAApC;AACA5B,OAAOW,IAAP,CAAY,uBAAZ,EACIP,eAAeyB,iBADnB,EAEIvB,YAAYF,eAAe0B,MAA3B,CAFJ;;AAIA9B,OAAOO,GAAP,CAAW,MAAX,EAAmBL,gBAAgB6B,OAAnC;AACA/B,OAAOO,GAAP,CAAW,SAAX,EAAsBH,eAAeK,UAArC,EAAiDH,YAAYJ,gBAAgB8B,SAA5B,CAAjD;AACAhC,OAAOW,IAAP,CAAY,cAAZ,EAA4BP,eAAeK,UAA3C,EAAuDH,YAAYD,iBAAiB4B,SAA7B,CAAvD;;AAGAjC,OAAOO,GAAP,CAAW,MAAX,EAAmBD,YAAYJ,gBAAgBgC,YAA5B,CAAnB;;AAEA;;;;AAIAlC,OAAOO,GAAP,CAAW,aAAX,EAA0BD,YAAYJ,gBAAgBiC,YAA5B,CAA1B;AACAnC,OAAOO,GAAP,CAAW,kBAAX,EAA+BD,YAAYJ,gBAAgBkC,SAA5B,CAA/B;AACApC,OAAOW,IAAP,CAAY,uBAAZ,EAAqCL,YAAYJ,gBAAgBmC,UAA5B,CAArC;;AAGAC,OAAOC,OAAP,GAAiBvC,MAAjB","file":"index.js","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst storeController = require('../controllers/storeController');\nconst userController = require('../controllers/userController');\nconst authController = require('../controllers/authController');\nconst reviewController = require('../controllers/reviewController');\nconst { catchErrors } = require('../handlers/errorHandlers');\n\n// req is object full of info that coming in\n// res is object full of methods that sending data back to user \n// Do work here\n\nrouter.get('/', catchErrors(storeController.getStores));\nrouter.get('/stores', catchErrors(storeController.getStores));\nrouter.get('/add', authController.isLoggedIn,storeController.addStore);\n\nrouter.post('/add',\n    storeController.upload,\n    catchErrors(storeController.resize),\n    catchErrors(storeController.createStore)\n);\n\nrouter.post('/add/:id',\n    storeController.upload,\n    catchErrors(storeController.resize),\n    catchErrors(storeController.updateStore)\n);\n\nrouter.get('/stores/:id/edit', catchErrors(storeController.editStore));\nrouter.get('/store/:slug', catchErrors(storeController.getStoreBySlug));\n\nrouter.get('/tags', catchErrors(storeController.getStoreByTag));\nrouter.get('/tags/:tag', catchErrors(storeController.getStoreByTag));\n\nrouter.get('/login', userController.loginForm);\nrouter.post('/login', authController.login);\nrouter.get('/register', userController.registerForm);\n\n// 1. Validate the registration data\n// 2. register the user\n// 3. we need to log them in\nrouter.post('/register',\n    userController.validateRegister,\n    userController.register,\n    authController.login\n);\n\nrouter.get('/logout', authController.logout);\n\nrouter.get('/account', authController.isLoggedIn,userController.account);\nrouter.post('/account', catchErrors(userController.updateAccount));\nrouter.post('/account/forgot', catchErrors(authController.forgot));\nrouter.get('/account/reset/:token', catchErrors(authController.reset));\nrouter.post('/account/reset/:token',\n    authController.confirmedPassword,\n    catchErrors(authController.update));\n\nrouter.get('/map', storeController.mapPage);\nrouter.get('/hearts', authController.isLoggedIn, catchErrors(storeController.getHearts));\nrouter.post('/reviews/:id', authController.isLoggedIn, catchErrors(reviewController.addReview));\n\n\nrouter.get('/top', catchErrors(storeController.getTopStores));\n\n/*\n    API\n */\n\nrouter.get('/api/search', catchErrors(storeController.searchStores));\nrouter.get('/api/stores/near', catchErrors(storeController.mapStores));\nrouter.post('/api/stores/:id/heart', catchErrors(storeController.heartStore));\n\n\nmodule.exports = router;"]}